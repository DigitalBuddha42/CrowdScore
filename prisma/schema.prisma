generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  login          String?
  role           UserRole  @default(user)
  isAdmin        Boolean   @default(false)
  accounts       Account[]
  sessions       Session[]
  scorecards     Scorecard[]
  profile        UserProfile?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  user
  admin
}

model Allowlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Fight {
  id          String    @id @default(cuid())
  eventName   String
  fighter1    String
  fighter2    String
  weightClass String
  rounds      Int       @default(3)
  status      FightStatus @default(upcoming)
  startTime   DateTime?
  endTime     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  scorecards  Scorecard[]
  judgeScores JudgeScore[]
}

model Scorecard {
  id        String   @id @default(cuid())
  userId    String
  fightId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rounds    Round[]
  user      User     @relation(fields: [userId], references: [id])
  fight     Fight    @relation(fields: [fightId], references: [id])
}

model Round {
  id          String   @id @default(cuid())
  scorecardId String
  roundNumber Int
  fighter1Score Int
  fighter2Score Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  scorecard   Scorecard @relation(fields: [scorecardId], references: [id])
}

model JudgeScore {
  id          String   @id @default(cuid())
  fightId     String
  judgeName   String
  roundNumber Int
  fighter1Score Int
  fighter2Score Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fight       Fight    @relation(fields: [fightId], references: [id])
}

model UserProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  bio           String?
  location      String?
  favoriteWeightClass String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

enum FightStatus {
  upcoming
  live
  completed
  cancelled
}
